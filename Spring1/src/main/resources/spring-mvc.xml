<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc.xsd
">
<!--    Controller的组件扫描-->
    <context:component-scan base-package="login">
<!--        指定扫描注解为Controller的-->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

<!--    配置内部资源视图解析器-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<!--        加/jsp/前缀-->
        <property name="prefix" value="/jsp/"></property>
<!--        加.jsp后缀-->
        <property name="suffix" value=".jsp"></property>
    </bean>


<!--    配置处理器映射器(为了返回对象时自动转换成json)-->
<!--    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            </list>
        </property>
        </bean>
-->
<!--    MVC注解驱动(配置后不用配置处理器映射器,底层会集成jackson)-->
<!--    <mvc:annotation-driven/>-->


<!--    开放资源的访问(访问jquery文件)-->
    <mvc:resources mapping="/js/**" location="/js/"/>
<!--    spring找不到交由原始的容器寻找(也可以访问jquery文件)-->
    <mvc:default-servlet-handler/>

<!--    1.声明转换器(为了设置日期格式)-->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="login.converter.DateConverter"/>
            </list>
        </property>
    </bean>
<!--    2.使用指定的日期转换器-->
    <mvc:annotation-driven conversion-service="conversionService"/>


<!--    配置文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<!--       上传文件的编码类型-->
        <property name="defaultEncoding" value="UTF-8"/>
<!--        上传文件总大小-->
        <property name="maxInMemorySize" value="5242800"/>
<!--        上传单个文件的大小-->
        <property name="maxUploadSizePerFile" value="5242800"/>
    </bean>

<!--    //在myInterceptor修改拦截器，在“interceptor.TargetController_拦截器”类中测试-->
<!--    加同样的拦截器类也都会执行-->
    <mvc:interceptors>
        <mvc:interceptor>
<!--            对那些资源执行拦截操作-->
<!--            “/**”表示对所有方法都执行拦截操作-->
            <mvc:mapping path="/target/**"/>
            <bean class="login.interceptor.MyInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <!--对哪些资源执行拦截操作-->
            <!-- “/**”表示对所有方法都执行拦截操作-->
            <mvc:mapping path="/target/**"/>
<!--            对哪些资源不进行拦截-->
            <mvc:exclude-mapping path="/user/login"/>
            <bean class="login.interceptor.MyInterceptor2"/>
        </mvc:interceptor>
    </mvc:interceptors>

<!--    配置异常处理类（exception包测试）-->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--&lt;!&ndash;        value的值为 /jsp/error.jsp&ndash;&gt;-->
<!--        <property name="defaultErrorView" value="error1"/>-->
<!--        <property name="exceptionMappings">-->
<!--            <map>-->
<!--                <entry key="java.lang.ClassCastException" value="error2"/>-->
<!--                <entry key="login.exception.MyException" value="error3"/>-->
<!--            </map>-->
<!--        </property>-->
<!--    </bean>-->

<!--    配置自定义异常处理器-->
    <bean class="login.exception.resolver.MyExceptionResolver"/>
</beans>