<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!--加载配置文件-->
    <context:property-placeholder location="rabbitmq.properties"/>
    <!--定义rabbitmq connectionFactory-->
    <rabbit:connection-factory id="connectionFactory"
                               host="${rabbitmq.host}"
                               port="${rabbitmq.port}"
                               virtual-host="${rabbitmq.virtual-host}"
                               username="${rabbitmq.username}"
                               password="${rabbitmq.password}"
                               publisher-confirms="true"
                               publisher-returns="true"/>
    <!--定义管理交换机、队列...-->
   <rabbit:admin connection-factory="connectionFactory"/>
    <!--定义持久化队列，不存在则自动创建，不绑定交换机则绑定到默认交换机-->
    <!--=========================默认类型为direct，名字为"",路由键为队列名称===========================-->
     <!--
        id: bean的名称
        name: queue的名称
        auto-declare:如果不存在，则自动创建
        auto-delete: 自动删除。最后一个消费者和该队列断开连接后，自动删除队列
        durable: 是否持久化
        exclusive: 是否独占
     -->
    <rabbit:queue id="spring_queue" name="spring_queue" auto-declare="true"/>
    <!--=============================广播fanout，所有队列都能收到消息================================-->
    <!--定义广播交换机中的持久化队列，不存在则自动创建-->
    <rabbit:queue id="spring_fanout_queue1" name="spring_fanout_queue1" auto-declare="true"/>
    <rabbit:queue id="spring_fanout_queue2" name="spring_fanout_queue2" auto-declare="true"/>
    <!--定义广播类型交换机，并绑定上述两个队列-->
    <rabbit:fanout-exchange id="spring_fanout_exchange" name="spring_fanout_exchange" auto-declare="true">
        <rabbit:bindings>
            <rabbit:binding queue="spring_fanout_queue1"/>
            <rabbit:binding queue="spring_fanout_queue2"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>
    <!--===========================routing 路由===========================-->
    <rabbit:queue id="spring_routing_queue1" name="spring_routing_queue1" auto-declare="true"/>
    <rabbit:queue id="spring_routing_queue2" name="spring_routing_queue2" auto-declare="true"/>
    <rabbit:direct-exchange id="spring_routing_exchange" name="spring_routing_exchange">
        <rabbit:bindings>
            <rabbit:binding key="order.info" queue="spring_routing_queue1"/>
            <rabbit:binding key="order.error" queue="spring_routing_queue1"/>
            <rabbit:binding key="order.error" queue="spring_routing_queue2"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>
    <!--===========================通配符 *匹配一个单词，#匹配多个单词-===========================-->
    <rabbit:queue id="spring_topic_queue1" name="spring_topic_queue1" auto-declare="true"/>
    <rabbit:queue id="spring_topic_queue2" name="spring_topic_queue2" auto-declare="true"/>
    <rabbit:topic-exchange id="spring_topic_exchange" name="spring_topic_exchange">
        <rabbit:bindings>
            <!--pattern:表达式-->
            <rabbit:binding pattern="*.info" queue="spring_topic_queue1"/>
            <rabbit:binding pattern="*.error" queue="spring_topic_queue1"/>
            <rabbit:binding pattern="*.warning" queue="spring_topic_queue1"/>
            <rabbit:binding pattern="*.error" queue="spring_topic_queue2"/>
            <rabbit:binding pattern="#.warning" queue="spring_topic_queue2"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--定义rabbitTemplate对象操作可以在代码中方便发送消息-->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"/>

    <!--===========================消息的可靠性投递===========================-->
    <rabbit:queue id="confirm_queue" name="confirm_queue"/>
    <rabbit:queue id="qos_queue" name="qos_queue"/>
    <rabbit:topic-exchange id="confirm_exchange" name="confirm_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="#.error" queue="confirm_queue"/>
            <rabbit:binding pattern="#.info" queue="qos_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--===========================ttl过期时间===========================-->
    <rabbit:queue id="ttl_queue" name="ttl_queue">
        <!--设置queue的参数-->
        <rabbit:queue-arguments>
            <!--x-message-ttl指队列的过期时间(ms)-->
            <entry key="x-message-ttl" value="10000" value-type="java.lang.Integer"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <rabbit:topic-exchange name="ttl_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="#.ttl" queue="ttl_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--===========================DLX死信队列===========================-->
    <!--
     消息成为死信的三种情况
     1、队列消息长度达到限制
     2、消费者拒接消费消息，并且不重回队列
     3、原队列存在消息过期设置，消息达到超时时间未被消费(x-message-ttl指定指队列的过期时间)
     步骤1、声明正常的队列(dlx_queue)和交换机(dlx_exchange)
        2、声明死信队列(dlx_dead_queue)和死信交换机(dlx_dead_exchange)
        3、正常队列绑定死信交换机
            设置两个参数
                x-dead-letter-exchange：死信交换机名称
                x-dead-letter-routing-key：发送给死信交换机的routingkey
    -->
    <rabbit:queue id="dlx_queue" name="dlx_queue">
        <rabbit:queue-arguments>
            <!--x-dead-letter-exchange：死信交换机名称-->
            <entry key="x-dead-letter-exchange" value="dlx_dead_exchange"/>
            <!--x-dead-letter-routing-key：发送给死信交换机的routingkey-->
            <entry key="x-dead-letter-routing-key" value="order.error"/>
            <!--x-max-length-bytes设置队列长度限制-->
            <entry key="x-max-length-bytes" value="10" value-type="java.lang.Integer"/>
            <!--x-message-ttl队列的过期时间(ms)-->
            <entry key="x-message-ttl" value="10000" value-type="java.lang.Integer"/>
        </rabbit:queue-arguments>
    </rabbit:queue>
    <rabbit:queue id="dlx2_queue" name="dlx2_queue">
        <rabbit:queue-arguments>
            <!--x-dead-letter-exchange：死信交换机名称-->
            <entry key="x-dead-letter-exchange" value="dlx_dead_exchange"/>
            <!--x-dead-letter-routing-key：发送给死信交换机的routingkey-->
            <entry key="x-dead-letter-routing-key" value="order.error"/>
        </rabbit:queue-arguments>
    </rabbit:queue>
    <rabbit:topic-exchange id="dlx_exchange" name="dlx_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="#.info" queue="dlx_queue"/>
            <rabbit:binding pattern="#.warning" queue="dlx2_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <rabbit:queue id="dlx_dead_queue" name="dlx_dead_queue"/>
    <rabbit:topic-exchange id="dlx_dead_exchange" name="dlx_dead_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="#.error" queue="dlx_dead_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
    <!--===========================延迟队列===========================-->
    <!--
    通过TTL(过期时间)+DLX(死信队列)实现延迟队列
    过期时间设置为需要延迟的时间,consumer的监听器监听死信队列(delay_dead_queue)(而不是provider发消息发送到的队列)
    -->
    <rabbit:queue id="delay_queue" name="delay_queue">
        <rabbit:queue-arguments>
            <!--x-dead-letter-exchange：死信交换机名称-->
            <entry key="x-dead-letter-exchange" value="delay_dead_exchange"/>
            <!--x-dead-letter-routing-key：发送给死信交换机的routingkey-->
            <entry key="x-dead-letter-routing-key" value="delay_dead"/>
            <!--x-message-ttl队列的过期时间(ms)-->
            <entry key="x-message-ttl" value="15000" value-type="java.lang.Integer"/>
        </rabbit:queue-arguments>
    </rabbit:queue>
    <rabbit:topic-exchange id="delay_exchange" name="delay_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="delay" queue="delay_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <rabbit:queue id="delay_dead_queue" name="delay_dead_queue"/>
    <rabbit:topic-exchange id="delay_dead_exchange" name="delay_dead_exchange">
        <rabbit:bindings>
            <rabbit:binding pattern="delay_dead" queue="delay_dead_queue"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>
</beans>