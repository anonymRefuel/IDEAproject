<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


    <!--http：用于定义相关权限控制(指定哪些资源不需要进行权限校验，可以使用通配符)-->
    <security:http security="none" pattern="/pages/a.html"/>
    <security:http security="none" pattern="/pages/b.html"/>
    <!--  /**表示当前文件及子文件  -->
    <security:http security="none" pattern="/pages/test/**"/>
    <!--设置自定义页面前，需要放开登录页面权限-->
    <security:http security="none" pattern="/login.html"/>

    <!--
          http：用于定义相关权限控制
          auto-config：是否自动配置
                          设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                          设置为false时需要显示提供登录表单配置，否则会报错
          use-expressions：用于指定intercept-url中的access属性是否使用表达式
      -->
    <security:http auto-config="true" use-expressions="true">
        <!--
               intercept-url：定义一个拦截规则
               pattern：对哪些url进行权限控制
               access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
                     请求的用户只需拥有其中的一个角色就能成功访问对应的URL
           -->

        <!--<security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>-->
        <!--只要认证通过就可以访问(若前面设置了/**需要是ROLE_ADMIN角色所以只有admin账号可以访问)-->
        <security:intercept-url pattern="/1.html"  access="isAuthenticated()" />
        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/2.html"  access="hasAuthority('add')" />
        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/3.html"  access="hasRole('ROLE_ADMIN')" />
        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/4.html"  access="hasRole('ADMIN')" />

        <!--  form-login：定义表单登录信息  -->
        <security:form-login login-page="/login.html" username-parameter="username" password-parameter="password"
                             login-processing-url="/login.do" default-target-url="/index.jsp" authentication-failure-url="/login.html"/>
        <!--logout：退出登录  logout-url：退出登录操作对应的请求路径  logout-success-url：退出登录后的跳转页面-->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"/>
        <!--  csrf：对应CsrfFilter过滤器
             disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403） -->
        <security:csrf disabled="true"/>
    </security:http>

    <bean id="userService" class="com.service.MyUserService"/>
    <!--使用bcrypt加密算法-->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!--authentication-manager：认证管理器，用于处理认证操作-->
    <security:authentication-manager>
        <!--authentication-provider：认证提供者，执行具体的认证逻辑-->
        <security:authentication-provider>
            <!--user-service：用于获取用户信息，提供给authentication-provider进行认证-->
            <security:user-service>
                <!--
                  user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
                 {noop}：表示当前使用的密码为明文
               -->
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
        <!--除了配置文件指定权限，还可以配置调用实现UserDetailsService接口的userService判断用户权限(会自动调用实现类的loadUserByUsername方法)-->
        <security:authentication-provider user-service-ref="userService">
            <!--设置加密策略-->
            <security:password-encoder ref="bCryptPasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />
</beans>